{"version":3,"sources":["components/Blog.js","components/Notification.js","components/LoginForm.js","components/BlogForm.js","components/Togglable.js","services/blogs.js","services/login.js","App.js","index.js"],"names":["Blog","handleLike","blog","user","remove","useState","expanded","setExpanded","handleExpandClick","handleLikeClick","a","id","handleRemoveClick","className","title","onClick","author","href","url","likes","username","Notification","message","style","errorStyle","color","background","fontSize","borderStyle","borderRadius","padding","marginBottom","successStyle","infoStyle","styleToChoose","LoginForm","handleLogin","setUsername","password","setPassword","onSubmit","type","value","name","onChange","target","BlogForm","createBlog","blogTitle","setBlogTitle","blogAuthor","setBlogAuthor","blogUrl","setBlogUrl","event","preventDefault","Togglable","React","forwardRef","props","ref","visible","setVisible","hideWhenVisible","display","showWhenVisible","toggleVisibility","useImperativeHandle","buttonLabel","children","displayName","token","getAll","axios","get","then","response","data","create","newObject","config","headers","Authorization","post","update","put","idToDelete","delete","setToken","newToken","login","credentials","App","blogs","setBlogs","setUser","newMessage","setNewMessage","newMessageStyle","setNewMessageStyle","blogFormRef","useRef","useEffect","blogService","sort","b","fetchData","loggedUserJSON","window","localStorage","getItem","loggedUser","JSON","parse","loginService","userToLogin","setItem","stringify","makeMessage","handleLogout","removeItem","addBlog","blogObject","current","createdBlog","concat","removeBlog","titleOf","find","confirm","filter","changedBlog","updatedBlog","map","ms","messageTimeOut","setTimeout","key","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.f2ce9d3b.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\n\r\nconst Blog = ({ handleLike, blog, user, remove }) => {\r\n    const [expanded, setExpanded] = useState(false)\r\n\r\n    const handleExpandClick = () => {\r\n        setExpanded(!expanded)\r\n    }\r\n\r\n    const handleLikeClick = async () => {\r\n        await handleLike(blog.id)\r\n    }\r\n\r\n    const handleRemoveClick = async () => {\r\n        await remove(blog.id)\r\n    }\r\n\r\n    return expanded\r\n        ? <div className='blog'>\r\n            <h4>{blog.title}</h4>\r\n            <button onClick={handleExpandClick}>Hide</button>\r\n            <p>Author: {blog.author}</p>\r\n            <p>\r\n                URL: <a href={`https://${blog.url}`}>{blog.url}</a>\r\n            </p>\r\n            <p className='blog-likes'>Likes: {blog.likes}\r\n                <button onClick={handleLikeClick} className='like-button'>Like</button>\r\n            </p>\r\n            <p>Added By: {blog.user.username}</p>\r\n            {user.username === blog.user.username\r\n                ? <button onClick={handleRemoveClick}>Remove</button>\r\n                : ''\r\n            }\r\n        </div>\r\n        : <div className='blog blogHidden'>\r\n            <h4>{blog.title}</h4>\r\n            <button onClick={handleExpandClick}>Show</button>\r\n        </div>\r\n}\r\n\r\nexport default Blog\r\n","import React from 'react'\n\nconst Notification = ({ message, style }) => {\n\n    const errorStyle = {\n        color: 'red',\n        background: 'lightgrey',\n        fontSize: '20px',\n        borderStyle: 'solid',\n        borderRadius: '5px',\n        padding: '10px',\n        marginBottom: '10px'\n    }\n\n    const successStyle = { ...errorStyle, color: 'green' }\n\n    const infoStyle = { ...errorStyle, color: 'blue' }\n\n    const styleToChoose = style === 'success'\n        ? successStyle\n        : style === 'error'\n            ? errorStyle\n            : infoStyle\n\n    if (message === null) {\n        return null\n    }\n    return (\n        <div id='notification' style={styleToChoose}>\n            {message}\n        </div>\n    )\n}\n\nexport default Notification","import React from 'react'\nimport PropTypes from 'prop-types'\n\nconst LoginForm = ({\n    handleLogin,\n    username,\n    setUsername,\n    password,\n    setPassword\n}) => {\n    return (\n        <form onSubmit={handleLogin}>\n            <div>\n                Username:\n                <input\n                    type=\"text\"\n                    value={username}\n                    name=\"Username\"\n                    onChange={({ target }) => setUsername(target.value)}\n                    id=\"username\"\n                />\n            </div>\n            <div>\n                Password:\n                <input\n                    type=\"password\"\n                    value={password}\n                    name=\"Password\"\n                    onChange={({ target }) => setPassword(target.value)}\n                    id=\"password\"\n                />\n            </div>\n            <button className='btn' type=\"submit\" id=\"login-button\">Login</button>\n        </form>\n    )\n}\n\nLoginForm.propTypes = {\n    handleLogin: PropTypes.func.isRequired,\n    setUsername: PropTypes.func.isRequired,\n    setPassword: PropTypes.func.isRequired,\n    username: PropTypes.string.isRequired,\n    password: PropTypes.string.isRequired\n}\n\nexport default LoginForm","import React, { useState } from 'react'\n\nconst BlogForm = ({ createBlog }) => {\n\n    const [blogTitle, setBlogTitle] = useState('')\n    const [blogAuthor, setBlogAuthor] = useState('')\n    const [blogUrl, setBlogUrl] = useState('')\n\n    const addBlog = (event) => {\n        event.preventDefault()\n\n        createBlog({\n            title: blogTitle,\n            author: blogAuthor,\n            url: blogUrl\n        })\n        setBlogTitle('')\n        setBlogAuthor('')\n        setBlogUrl('')\n    }\n\n    const handleTitleChange = (event) => {\n        setBlogTitle(event.target.value)\n    }\n\n    const handleAuthorChange = (event) => {\n        setBlogAuthor(event.target.value)\n    }\n\n    const handleUrlChange = (event) => {\n        setBlogUrl(event.target.value)\n    }\n\n    return (\n        <div className=\"blogFormDiv subdiv-1\">\n            <h3 className=\"blogFormTitle\">Add New Blog:</h3>\n            <form onSubmit={addBlog} id=\"BlogForm\" className=\"blogInputBox\">\n                <div className=\"blogInput\">\n                    <h5 className=\"blogInputText\">Title:</h5>\n                    <input\n                        type=\"text\"\n                        value={blogTitle}\n                        name=\"BlogTitle\"\n                        id=\"BlogTitle\"\n                        onChange={handleTitleChange}\n                        className=\"blogInputField\"\n                    />\n                </div>\n                <div className=\"blogInput\">\n                    <h5 className=\"blogInputText\">Author:</h5>\n                    <input\n                        type=\"text\"\n                        value={blogAuthor}\n                        name=\"BlogAuthor\"\n                        id=\"BlogAuthor\"\n                        onChange={handleAuthorChange}\n                        className=\"blogInputField\"\n                    />\n                </div>\n                <div className=\"blogInput\">\n                    <h5 className=\"blogInputText\">URL:</h5>\n                    <input\n                        type=\"text\"\n                        value={blogUrl}\n                        name=\"BlogUrl\"\n                        id=\"BlogUrl\"\n                        onChange={handleUrlChange}\n                        className=\"blogInputField\"\n                    />\n                </div>\n                <button type=\"submit\">Save Blog</button>\n            </form>\n        </div>\n    )\n}\n\n\nexport default BlogForm","import React, { useState, useImperativeHandle } from 'react'\nimport PropTypes from 'prop-types'\n\nconst Togglable = React.forwardRef((props, ref) => {\n    const [visible, setVisible] = useState(false)\n\n    const hideWhenVisible = { display: visible ? 'none' : '' }\n    const showWhenVisible = { display: visible ? '' : 'none' }\n\n    const toggleVisibility = () => {\n        setVisible(!visible)\n    }\n\n    useImperativeHandle(ref, () => {\n        return {\n            toggleVisibility\n        }\n    })\n\n    return (\n        <div>\n            <div style={hideWhenVisible}>\n                <button onClick={toggleVisibility}>{props.buttonLabel}</button>\n            </div>\n            <div style={showWhenVisible}>\n                {props.children}\n                <button onClick={toggleVisibility}>Cancel</button>\n            </div>\n        </div>\n    )\n})\n\nTogglable.displayName = 'Togglable'\n\nTogglable.propTypes = {\n    buttonLabel: PropTypes.string.isRequired\n}\n\nexport default Togglable","import axios from 'axios'\nconst baseUrl = '/api/blogs'\n\nlet token = null\n\nconst getAll = () => {\n    const request = axios.get(baseUrl)\n    return request.then(response => response.data)\n}\n\nconst create = async newObject => {\n    const config = {\n        headers: {\n            Authorization: token\n        },\n    }\n\n    const response = await axios.post(baseUrl, newObject, config)\n    return response.data\n}\n\nconst update = async (id, newObject) => {\n    const response = await axios.put(`${baseUrl}/${id}`, newObject)\n    return response.data\n}\n\nconst remove = async (idToDelete) => {\n    const config = {\n        headers: {\n            Authorization: token\n        },\n    }\n\n    const response = await axios.delete(`${baseUrl}/${idToDelete}`, config)\n    return response.data\n}\n\nconst setToken = newToken => {\n    token = `bearer ${newToken}`\n}\n\nexport default {\n    getAll,\n    create,\n    update,\n    remove,\n    setToken\n}","import axios from 'axios'\nconst baseUrl = '/api/login'\n\nconst login = async credentials => {\n    const response = await axios.post(baseUrl, credentials)\n    return response.data\n}\n\nexport default { login }","import React, { useState, useEffect, useRef } from 'react'\nimport Blog from './components/Blog'\nimport Notification from './components/Notification'\nimport LoginForm from './components/LoginForm'\nimport BlogForm from './components/BlogForm'\nimport Togglable from './components/Togglable'\nimport blogService from './services/blogs'\nimport loginService from './services/login'\n\nconst App = () => {\n    const [blogs, setBlogs] = useState([])\n    const [username, setUsername] = useState('')\n    const [password, setPassword] = useState('')\n    const [user, setUser] = useState(null)\n    const [newMessage, setNewMessage] = useState(null)\n    const [newMessageStyle, setNewMessageStyle] = useState('success')\n    const blogFormRef = useRef()\n\n    const getAllBlogsHook = () => {\n        const fetchData = async () => {\n            let blogs = await blogService.getAll()\n            blogs = blogs.sort((a, b) => (a.likes < b.likes) ? 1 : -1)\n            setBlogs( blogs )\n        }\n        fetchData()\n    }\n\n    const checkIfLoggedInHook = () => {\n        const loggedUserJSON = window.localStorage.getItem('loggedBlogAppUser')\n        if (loggedUserJSON) {\n            const loggedUser = JSON.parse(loggedUserJSON)\n            setUser(loggedUser)\n            blogService.setToken(loggedUser.token)\n        }\n    }\n\n    useEffect(getAllBlogsHook, [])\n    useEffect(checkIfLoggedInHook, [])\n\n    const handleLogin = async (event) => {\n        event.preventDefault()\n        try {\n            const userToLogin = await loginService.login({\n                username,\n                password,\n            })\n            window.localStorage.setItem(\n                'loggedBlogAppUser', JSON.stringify(userToLogin)\n            )\n            blogService.setToken(userToLogin.token)\n            setUser(userToLogin)\n            setUsername('')\n            setPassword('')\n            makeMessage(\n                'success',\n                'Logged in succesfully!',\n                5000\n            )\n        }\n        catch (exception) {\n            makeMessage(\n                'error',\n                'Login failed: Incorrect credentials',\n                5000\n            )\n        }\n    }\n\n    const handleLogout = async () => {\n        window.localStorage.removeItem('loggedBlogAppUser')\n        //window.location.reload()\n        setUser(null)\n        makeMessage(\n            'success',\n            'Logged out succesfully!',\n            5000\n        )\n    }\n\n    const addBlog = async (blogObject) => {\n        blogFormRef.current.toggleVisibility()\n\n        const createdBlog = await blogService.create(blogObject)\n        setBlogs(blogs.concat(createdBlog))\n\n        makeMessage(\n            'success',\n            `New blog with title ${createdBlog.title} added!`,\n            5000\n        )\n    }\n\n    const removeBlog = async (id) => {\n        const titleOf = blogs.find(b => b.id === id).title\n        if (window.confirm(`Do you really want to delete \"${titleOf}\"?`)) {\n            await blogService\n                .remove(id)\n\n            setBlogs(blogs.filter(b => b.id !== id))\n            makeMessage(\n                'success',\n                `Successfully removed \"${titleOf}\"`,\n                5000\n            )\n        }\n    }\n\n    const handleLike = async (id) => {\n\n        const blog = blogs.find(b => b.id === id)\n\n        const changedBlog = {\n            ...blog,\n            likes: blog.likes + 1,\n            user: blog.user.id\n        }\n        const updatedBlog = await blogService\n            .update(id, changedBlog)\n\n        setBlogs(blogs.map(blog => blog.id !== id ? blog : { ...updatedBlog, user: blog.user }))\n    }\n\n    //Function for displaying messages:\n    const makeMessage = (style, message, ms) => {\n        setNewMessageStyle(style)\n        setNewMessage(message)\n        messageTimeOut(ms)\n    }\n\n    //Function for setting time out for messages:\n    const messageTimeOut = (ms) => {\n        return setTimeout(() => {setNewMessage(null)}, ms)\n    }\n\n    const loginForm = () => (\n        <Togglable buttonLabel='Login'>\n            <LoginForm\n                handleLogin={handleLogin}\n                username={username}\n                password={password}\n                setUsername={setUsername}\n                setPassword={setPassword}\n            />\n        </Togglable>\n    )\n\n    const blogForm = () => (\n        <Togglable buttonLabel='Add New Blog' ref={blogFormRef}>\n            <BlogForm createBlog={addBlog} />\n        </Togglable>\n    )\n\n    const loggedInText = () => (\n        <div className=\"loggedInDiv subdiv-1\">\n            <p>Logged in as {user.name}</p>\n            <button onClick={handleLogout}>Log Out</button>\n        </div>\n    )\n\n    const blogList = () => (\n        <div className=\"allBlogs subdiv-1\">\n            <h3>All Blogs:</h3>\n            <div id=\"blogs-listed\">\n                {blogs.map(blog =>\n                    <Blog\n                        key={blog.id}\n                        handleLike={handleLike}\n                        blog={blog}\n                        user={user}\n                        remove={removeBlog}\n                    />\n                )}\n            </div>\n        </div>\n    )\n\n    return (\n        <div className='boxDiv'>\n            <h1>Blog App</h1>\n            <Notification message={newMessage} style={newMessageStyle} />\n            {user === null\n                ? <div>\n                    <h3>Log in to Blog App</h3>\n                    {loginForm()}\n                </div>\n                : <div>\n                    {loggedInText()}<br/>\n                    {blogForm()}<br/>\n                    {blogList()}\n                </div>\n            }\n        </div>\n    )\n}\n\nexport default App","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))"],"sourceRoot":""}